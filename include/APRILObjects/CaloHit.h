/// \file CaloHit.h
/*
 *
 * CaloHit.h header template automatically generated by a class generator
 * Creation date : lun. mars 30 2015
 *
 * This file is part of APRILContent libraries.
 * 
 * APRILContent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * APRILContent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with APRILContent.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CALOHIT_H
#define CALOHIT_H

#include "Objects/CaloHit.h"

#include "Api/PandoraApi.h"
#include "Api/PandoraContentApi.h"


#include "APRILApi/APRILContentApi.h"
#include "APRILApi/APRILInputTypes.h"

#include "APRILObjects/APRILMetaData.h"

namespace april_content
{

class Connector;
class CaloHitFactory;

/** 
 *  @brief  CaloHit class
 */ 
class CaloHit : public pandora::CaloHit
{
public:
	/**
	 *  @brief  Get the surrounding hit energy
	 */
	float GetSurroundingEnergy() const;

	/**
	 *  @brief  Get the hit density
	 */
	float GetDensity() const;

	/**
	 *  @brief  Get the hit timing layer
	 */
	unsigned int GetTimingLayer() const;

	const pandora::Cluster* GetMother() const;
	void  SetMother(const pandora::Cluster* cluster);
//Added by TP

	/**
	 *  @brief  Set the hit timing layer
	 */
	void  SetTimingLayer(unsigned int timingLayer);

private:
	/**
	 *  @brief  Constructor with pandora calo hit parameters
	 */
	CaloHit(const PandoraApi::CaloHit::Parameters &parameters);

	/**
	 *  @brief  Constructor for calo hit fragmentation
	 */
	CaloHit(const PandoraContentApi::CaloHitFragment::Parameters &parameters);

	/**
	 *  @brief  Destructor
	 */
	~CaloHit();

	/**
	 *  @brief  Clear the tag map
	 */
	void ClearTagMap();

	/**
	 *  @brief  Save the recluster meta data. Called during the reclustering process to
	 *          back up the current calo hit meta data.
	 *          Note that a new calo hit meta data is allocated
	 *
	 *  @param  clusterListName the cluster list name under which to save the current meta data
	 */
	pandora::StatusCode SaveReclusterMetaData(const std::string &clusterListName);

	/**
	 *  @brief  End the reclustering process for this calo hit. Reload the calo hit meta
	 *          data corresponding to the selected cluster list and delete all the other
	 *          meta data
	 *
	 *  @param  selectedClusterListName the selected cluster list name to reload meta data
	 */
	pandora::StatusCode EndReclustering(const std::string &selectedClusterListName);

protected:

    typedef std::map<const std::string, CaloHitMetaData *> ReclusterMetaDataMap;

    // april related meta data
    CaloHitMetaData                        *m_pCaloHitMetaData;

    // re-clustering meta data
    ReclusterMetaDataMap                    m_reclusterMetaDataMap;

    float                                   m_surroundingEnergy;
    float                                   m_density;
    HitTagMap                               m_hitTagMap;

	const pandora::Cluster*                 m_motherCluster;

	unsigned int 							m_timingLayer;

    friend class CaloHitFactory;
    friend class ::APRILContentApi;
};

} 

#endif  //  CALOHIT_H
